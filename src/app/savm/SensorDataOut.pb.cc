// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorDataOut.proto

#include "SensorDataOut.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace protobuf {
class SensorDataOut_vec2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorDataOut_vec2>
      _instance;
} _SensorDataOut_vec2_default_instance_;
class SensorDataOutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorDataOut>
      _instance;
} _SensorDataOut_default_instance_;
}  // namespace protobuf
namespace protobuf_SensorDataOut_2eproto {
void InitDefaultsSensorDataOut_vec2Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::protobuf::_SensorDataOut_vec2_default_instance_;
    new (ptr) ::protobuf::SensorDataOut_vec2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::SensorDataOut_vec2::InitAsDefaultInstance();
}

void InitDefaultsSensorDataOut_vec2() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSensorDataOut_vec2Impl);
}

void InitDefaultsSensorDataOutImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_SensorDataOut_2eproto::InitDefaultsSensorDataOut_vec2();
  {
    void* ptr = &::protobuf::_SensorDataOut_default_instance_;
    new (ptr) ::protobuf::SensorDataOut();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::SensorDataOut::InitAsDefaultInstance();
}

void InitDefaultsSensorDataOut() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSensorDataOutImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut_vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut_vec2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut_vec2, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, ispositiontracked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, isspeedtracked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, leadpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, ownpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, cornerfrontright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, cornerfrontleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, cornerrearright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, cornerrearleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, leadspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, ownspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, curgear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, steerlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, enginerpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, enginerpmmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, brakefl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, brakefr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, brakerl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protobuf::SensorDataOut, brakerr_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protobuf::SensorDataOut_vec2)},
  { 7, -1, sizeof(::protobuf::SensorDataOut)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_SensorDataOut_vec2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobuf::_SensorDataOut_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "SensorDataOut.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023SensorDataOut.proto\022\010protobuf\"\336\004\n\rSens"
      "orDataOut\022\031\n\021isPositionTracked\030\001 \001(\010\022\026\n\016"
      "isSpeedTracked\030\002 \001(\010\022-\n\007leadPos\030\003 \001(\0132\034."
      "protobuf.SensorDataOut.vec2\022,\n\006ownPos\030\004 "
      "\001(\0132\034.protobuf.SensorDataOut.vec2\0226\n\020cor"
      "nerFrontRight\030\005 \001(\0132\034.protobuf.SensorDat"
      "aOut.vec2\0225\n\017cornerFrontLeft\030\006 \001(\0132\034.pro"
      "tobuf.SensorDataOut.vec2\0225\n\017cornerRearRi"
      "ght\030\007 \001(\0132\034.protobuf.SensorDataOut.vec2\022"
      "4\n\016cornerRearLeft\030\010 \001(\0132\034.protobuf.Senso"
      "rDataOut.vec2\022\021\n\tleadSpeed\030\t \001(\002\022\020\n\010ownS"
      "peed\030\n \001(\002\022\017\n\007curGear\030\013 \001(\005\022\021\n\tsteerLock"
      "\030\014 \001(\002\022\021\n\tenginerpm\030\r \001(\002\022\024\n\014enginerpmMa"
      "x\030\016 \001(\002\022\r\n\005steer\030\017 \001(\002\022\017\n\007brakeFL\030\020 \001(\002\022"
      "\017\n\007brakeFR\030\021 \001(\002\022\017\n\007brakeRL\030\022 \001(\002\022\017\n\007bra"
      "keRR\030\023 \001(\002\032\034\n\004vec2\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorDataOut.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SensorDataOut_2eproto
namespace protobuf {

// ===================================================================

void SensorDataOut_vec2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorDataOut_vec2::kXFieldNumber;
const int SensorDataOut_vec2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorDataOut_vec2::SensorDataOut_vec2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SensorDataOut_2eproto::InitDefaultsSensorDataOut_vec2();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.SensorDataOut.vec2)
}
SensorDataOut_vec2::SensorDataOut_vec2(const SensorDataOut_vec2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:protobuf.SensorDataOut.vec2)
}

void SensorDataOut_vec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

SensorDataOut_vec2::~SensorDataOut_vec2() {
  // @@protoc_insertion_point(destructor:protobuf.SensorDataOut.vec2)
  SharedDtor();
}

void SensorDataOut_vec2::SharedDtor() {
}

void SensorDataOut_vec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorDataOut_vec2::descriptor() {
  ::protobuf_SensorDataOut_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorDataOut_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorDataOut_vec2& SensorDataOut_vec2::default_instance() {
  ::protobuf_SensorDataOut_2eproto::InitDefaultsSensorDataOut_vec2();
  return *internal_default_instance();
}

SensorDataOut_vec2* SensorDataOut_vec2::New(::google::protobuf::Arena* arena) const {
  SensorDataOut_vec2* n = new SensorDataOut_vec2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorDataOut_vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.SensorDataOut.vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool SensorDataOut_vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.SensorDataOut.vec2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.SensorDataOut.vec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.SensorDataOut.vec2)
  return false;
#undef DO_
}

void SensorDataOut_vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.SensorDataOut.vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.SensorDataOut.vec2)
}

::google::protobuf::uint8* SensorDataOut_vec2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.SensorDataOut.vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.SensorDataOut.vec2)
  return target;
}

size_t SensorDataOut_vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.SensorDataOut.vec2)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorDataOut_vec2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.SensorDataOut.vec2)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorDataOut_vec2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorDataOut_vec2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.SensorDataOut.vec2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.SensorDataOut.vec2)
    MergeFrom(*source);
  }
}

void SensorDataOut_vec2::MergeFrom(const SensorDataOut_vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.SensorDataOut.vec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void SensorDataOut_vec2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.SensorDataOut.vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDataOut_vec2::CopyFrom(const SensorDataOut_vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.SensorDataOut.vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDataOut_vec2::IsInitialized() const {
  return true;
}

void SensorDataOut_vec2::Swap(SensorDataOut_vec2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorDataOut_vec2::InternalSwap(SensorDataOut_vec2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorDataOut_vec2::GetMetadata() const {
  protobuf_SensorDataOut_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorDataOut_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorDataOut::InitAsDefaultInstance() {
  ::protobuf::_SensorDataOut_default_instance_._instance.get_mutable()->leadpos_ = const_cast< ::protobuf::SensorDataOut_vec2*>(
      ::protobuf::SensorDataOut_vec2::internal_default_instance());
  ::protobuf::_SensorDataOut_default_instance_._instance.get_mutable()->ownpos_ = const_cast< ::protobuf::SensorDataOut_vec2*>(
      ::protobuf::SensorDataOut_vec2::internal_default_instance());
  ::protobuf::_SensorDataOut_default_instance_._instance.get_mutable()->cornerfrontright_ = const_cast< ::protobuf::SensorDataOut_vec2*>(
      ::protobuf::SensorDataOut_vec2::internal_default_instance());
  ::protobuf::_SensorDataOut_default_instance_._instance.get_mutable()->cornerfrontleft_ = const_cast< ::protobuf::SensorDataOut_vec2*>(
      ::protobuf::SensorDataOut_vec2::internal_default_instance());
  ::protobuf::_SensorDataOut_default_instance_._instance.get_mutable()->cornerrearright_ = const_cast< ::protobuf::SensorDataOut_vec2*>(
      ::protobuf::SensorDataOut_vec2::internal_default_instance());
  ::protobuf::_SensorDataOut_default_instance_._instance.get_mutable()->cornerrearleft_ = const_cast< ::protobuf::SensorDataOut_vec2*>(
      ::protobuf::SensorDataOut_vec2::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorDataOut::kIsPositionTrackedFieldNumber;
const int SensorDataOut::kIsSpeedTrackedFieldNumber;
const int SensorDataOut::kLeadPosFieldNumber;
const int SensorDataOut::kOwnPosFieldNumber;
const int SensorDataOut::kCornerFrontRightFieldNumber;
const int SensorDataOut::kCornerFrontLeftFieldNumber;
const int SensorDataOut::kCornerRearRightFieldNumber;
const int SensorDataOut::kCornerRearLeftFieldNumber;
const int SensorDataOut::kLeadSpeedFieldNumber;
const int SensorDataOut::kOwnSpeedFieldNumber;
const int SensorDataOut::kCurGearFieldNumber;
const int SensorDataOut::kSteerLockFieldNumber;
const int SensorDataOut::kEnginerpmFieldNumber;
const int SensorDataOut::kEnginerpmMaxFieldNumber;
const int SensorDataOut::kSteerFieldNumber;
const int SensorDataOut::kBrakeFLFieldNumber;
const int SensorDataOut::kBrakeFRFieldNumber;
const int SensorDataOut::kBrakeRLFieldNumber;
const int SensorDataOut::kBrakeRRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorDataOut::SensorDataOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SensorDataOut_2eproto::InitDefaultsSensorDataOut();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.SensorDataOut)
}
SensorDataOut::SensorDataOut(const SensorDataOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leadpos()) {
    leadpos_ = new ::protobuf::SensorDataOut_vec2(*from.leadpos_);
  } else {
    leadpos_ = NULL;
  }
  if (from.has_ownpos()) {
    ownpos_ = new ::protobuf::SensorDataOut_vec2(*from.ownpos_);
  } else {
    ownpos_ = NULL;
  }
  if (from.has_cornerfrontright()) {
    cornerfrontright_ = new ::protobuf::SensorDataOut_vec2(*from.cornerfrontright_);
  } else {
    cornerfrontright_ = NULL;
  }
  if (from.has_cornerfrontleft()) {
    cornerfrontleft_ = new ::protobuf::SensorDataOut_vec2(*from.cornerfrontleft_);
  } else {
    cornerfrontleft_ = NULL;
  }
  if (from.has_cornerrearright()) {
    cornerrearright_ = new ::protobuf::SensorDataOut_vec2(*from.cornerrearright_);
  } else {
    cornerrearright_ = NULL;
  }
  if (from.has_cornerrearleft()) {
    cornerrearleft_ = new ::protobuf::SensorDataOut_vec2(*from.cornerrearleft_);
  } else {
    cornerrearleft_ = NULL;
  }
  ::memcpy(&ispositiontracked_, &from.ispositiontracked_,
    static_cast<size_t>(reinterpret_cast<char*>(&brakerr_) -
    reinterpret_cast<char*>(&ispositiontracked_)) + sizeof(brakerr_));
  // @@protoc_insertion_point(copy_constructor:protobuf.SensorDataOut)
}

void SensorDataOut::SharedCtor() {
  ::memset(&leadpos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brakerr_) -
      reinterpret_cast<char*>(&leadpos_)) + sizeof(brakerr_));
  _cached_size_ = 0;
}

SensorDataOut::~SensorDataOut() {
  // @@protoc_insertion_point(destructor:protobuf.SensorDataOut)
  SharedDtor();
}

void SensorDataOut::SharedDtor() {
  if (this != internal_default_instance()) delete leadpos_;
  if (this != internal_default_instance()) delete ownpos_;
  if (this != internal_default_instance()) delete cornerfrontright_;
  if (this != internal_default_instance()) delete cornerfrontleft_;
  if (this != internal_default_instance()) delete cornerrearright_;
  if (this != internal_default_instance()) delete cornerrearleft_;
}

void SensorDataOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorDataOut::descriptor() {
  ::protobuf_SensorDataOut_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorDataOut_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorDataOut& SensorDataOut::default_instance() {
  ::protobuf_SensorDataOut_2eproto::InitDefaultsSensorDataOut();
  return *internal_default_instance();
}

SensorDataOut* SensorDataOut::New(::google::protobuf::Arena* arena) const {
  SensorDataOut* n = new SensorDataOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorDataOut::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.SensorDataOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && leadpos_ != NULL) {
    delete leadpos_;
  }
  leadpos_ = NULL;
  if (GetArenaNoVirtual() == NULL && ownpos_ != NULL) {
    delete ownpos_;
  }
  ownpos_ = NULL;
  if (GetArenaNoVirtual() == NULL && cornerfrontright_ != NULL) {
    delete cornerfrontright_;
  }
  cornerfrontright_ = NULL;
  if (GetArenaNoVirtual() == NULL && cornerfrontleft_ != NULL) {
    delete cornerfrontleft_;
  }
  cornerfrontleft_ = NULL;
  if (GetArenaNoVirtual() == NULL && cornerrearright_ != NULL) {
    delete cornerrearright_;
  }
  cornerrearright_ = NULL;
  if (GetArenaNoVirtual() == NULL && cornerrearleft_ != NULL) {
    delete cornerrearleft_;
  }
  cornerrearleft_ = NULL;
  ::memset(&ispositiontracked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brakerr_) -
      reinterpret_cast<char*>(&ispositiontracked_)) + sizeof(brakerr_));
  _internal_metadata_.Clear();
}

bool SensorDataOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.SensorDataOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isPositionTracked = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispositiontracked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSpeedTracked = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isspeedtracked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.SensorDataOut.vec2 leadPos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leadpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.SensorDataOut.vec2 ownPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ownpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.SensorDataOut.vec2 cornerFrontRight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cornerfrontright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.SensorDataOut.vec2 cornerFrontLeft = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cornerfrontleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.SensorDataOut.vec2 cornerRearRight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cornerrearright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protobuf.SensorDataOut.vec2 cornerRearLeft = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cornerrearleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float leadSpeed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leadspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ownSpeed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ownspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curGear = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curgear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steerLock = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steerlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float enginerpm = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enginerpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float enginerpmMax = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enginerpmmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steer = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brakeFL = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brakefl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brakeFR = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brakefr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brakeRL = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brakerl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brakeRR = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brakerr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.SensorDataOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.SensorDataOut)
  return false;
#undef DO_
}

void SensorDataOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.SensorDataOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPositionTracked = 1;
  if (this->ispositiontracked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ispositiontracked(), output);
  }

  // bool isSpeedTracked = 2;
  if (this->isspeedtracked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isspeedtracked(), output);
  }

  // .protobuf.SensorDataOut.vec2 leadPos = 3;
  if (this->has_leadpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leadpos_, output);
  }

  // .protobuf.SensorDataOut.vec2 ownPos = 4;
  if (this->has_ownpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ownpos_, output);
  }

  // .protobuf.SensorDataOut.vec2 cornerFrontRight = 5;
  if (this->has_cornerfrontright()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cornerfrontright_, output);
  }

  // .protobuf.SensorDataOut.vec2 cornerFrontLeft = 6;
  if (this->has_cornerfrontleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cornerfrontleft_, output);
  }

  // .protobuf.SensorDataOut.vec2 cornerRearRight = 7;
  if (this->has_cornerrearright()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cornerrearright_, output);
  }

  // .protobuf.SensorDataOut.vec2 cornerRearLeft = 8;
  if (this->has_cornerrearleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->cornerrearleft_, output);
  }

  // float leadSpeed = 9;
  if (this->leadspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->leadspeed(), output);
  }

  // float ownSpeed = 10;
  if (this->ownspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ownspeed(), output);
  }

  // int32 curGear = 11;
  if (this->curgear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->curgear(), output);
  }

  // float steerLock = 12;
  if (this->steerlock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steerlock(), output);
  }

  // float enginerpm = 13;
  if (this->enginerpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->enginerpm(), output);
  }

  // float enginerpmMax = 14;
  if (this->enginerpmmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->enginerpmmax(), output);
  }

  // float steer = 15;
  if (this->steer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->steer(), output);
  }

  // float brakeFL = 16;
  if (this->brakefl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->brakefl(), output);
  }

  // float brakeFR = 17;
  if (this->brakefr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->brakefr(), output);
  }

  // float brakeRL = 18;
  if (this->brakerl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->brakerl(), output);
  }

  // float brakeRR = 19;
  if (this->brakerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->brakerr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.SensorDataOut)
}

::google::protobuf::uint8* SensorDataOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.SensorDataOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPositionTracked = 1;
  if (this->ispositiontracked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ispositiontracked(), target);
  }

  // bool isSpeedTracked = 2;
  if (this->isspeedtracked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isspeedtracked(), target);
  }

  // .protobuf.SensorDataOut.vec2 leadPos = 3;
  if (this->has_leadpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->leadpos_, deterministic, target);
  }

  // .protobuf.SensorDataOut.vec2 ownPos = 4;
  if (this->has_ownpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->ownpos_, deterministic, target);
  }

  // .protobuf.SensorDataOut.vec2 cornerFrontRight = 5;
  if (this->has_cornerfrontright()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->cornerfrontright_, deterministic, target);
  }

  // .protobuf.SensorDataOut.vec2 cornerFrontLeft = 6;
  if (this->has_cornerfrontleft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->cornerfrontleft_, deterministic, target);
  }

  // .protobuf.SensorDataOut.vec2 cornerRearRight = 7;
  if (this->has_cornerrearright()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->cornerrearright_, deterministic, target);
  }

  // .protobuf.SensorDataOut.vec2 cornerRearLeft = 8;
  if (this->has_cornerrearleft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->cornerrearleft_, deterministic, target);
  }

  // float leadSpeed = 9;
  if (this->leadspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->leadspeed(), target);
  }

  // float ownSpeed = 10;
  if (this->ownspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->ownspeed(), target);
  }

  // int32 curGear = 11;
  if (this->curgear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->curgear(), target);
  }

  // float steerLock = 12;
  if (this->steerlock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steerlock(), target);
  }

  // float enginerpm = 13;
  if (this->enginerpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->enginerpm(), target);
  }

  // float enginerpmMax = 14;
  if (this->enginerpmmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->enginerpmmax(), target);
  }

  // float steer = 15;
  if (this->steer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->steer(), target);
  }

  // float brakeFL = 16;
  if (this->brakefl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->brakefl(), target);
  }

  // float brakeFR = 17;
  if (this->brakefr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->brakefr(), target);
  }

  // float brakeRL = 18;
  if (this->brakerl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->brakerl(), target);
  }

  // float brakeRR = 19;
  if (this->brakerr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->brakerr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.SensorDataOut)
  return target;
}

size_t SensorDataOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.SensorDataOut)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .protobuf.SensorDataOut.vec2 leadPos = 3;
  if (this->has_leadpos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->leadpos_);
  }

  // .protobuf.SensorDataOut.vec2 ownPos = 4;
  if (this->has_ownpos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ownpos_);
  }

  // .protobuf.SensorDataOut.vec2 cornerFrontRight = 5;
  if (this->has_cornerfrontright()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cornerfrontright_);
  }

  // .protobuf.SensorDataOut.vec2 cornerFrontLeft = 6;
  if (this->has_cornerfrontleft()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cornerfrontleft_);
  }

  // .protobuf.SensorDataOut.vec2 cornerRearRight = 7;
  if (this->has_cornerrearright()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cornerrearright_);
  }

  // .protobuf.SensorDataOut.vec2 cornerRearLeft = 8;
  if (this->has_cornerrearleft()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cornerrearleft_);
  }

  // bool isPositionTracked = 1;
  if (this->ispositiontracked() != 0) {
    total_size += 1 + 1;
  }

  // bool isSpeedTracked = 2;
  if (this->isspeedtracked() != 0) {
    total_size += 1 + 1;
  }

  // float leadSpeed = 9;
  if (this->leadspeed() != 0) {
    total_size += 1 + 4;
  }

  // float ownSpeed = 10;
  if (this->ownspeed() != 0) {
    total_size += 1 + 4;
  }

  // int32 curGear = 11;
  if (this->curgear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curgear());
  }

  // float steerLock = 12;
  if (this->steerlock() != 0) {
    total_size += 1 + 4;
  }

  // float enginerpm = 13;
  if (this->enginerpm() != 0) {
    total_size += 1 + 4;
  }

  // float enginerpmMax = 14;
  if (this->enginerpmmax() != 0) {
    total_size += 1 + 4;
  }

  // float steer = 15;
  if (this->steer() != 0) {
    total_size += 1 + 4;
  }

  // float brakeFL = 16;
  if (this->brakefl() != 0) {
    total_size += 2 + 4;
  }

  // float brakeFR = 17;
  if (this->brakefr() != 0) {
    total_size += 2 + 4;
  }

  // float brakeRL = 18;
  if (this->brakerl() != 0) {
    total_size += 2 + 4;
  }

  // float brakeRR = 19;
  if (this->brakerr() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorDataOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.SensorDataOut)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorDataOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorDataOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.SensorDataOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.SensorDataOut)
    MergeFrom(*source);
  }
}

void SensorDataOut::MergeFrom(const SensorDataOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.SensorDataOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leadpos()) {
    mutable_leadpos()->::protobuf::SensorDataOut_vec2::MergeFrom(from.leadpos());
  }
  if (from.has_ownpos()) {
    mutable_ownpos()->::protobuf::SensorDataOut_vec2::MergeFrom(from.ownpos());
  }
  if (from.has_cornerfrontright()) {
    mutable_cornerfrontright()->::protobuf::SensorDataOut_vec2::MergeFrom(from.cornerfrontright());
  }
  if (from.has_cornerfrontleft()) {
    mutable_cornerfrontleft()->::protobuf::SensorDataOut_vec2::MergeFrom(from.cornerfrontleft());
  }
  if (from.has_cornerrearright()) {
    mutable_cornerrearright()->::protobuf::SensorDataOut_vec2::MergeFrom(from.cornerrearright());
  }
  if (from.has_cornerrearleft()) {
    mutable_cornerrearleft()->::protobuf::SensorDataOut_vec2::MergeFrom(from.cornerrearleft());
  }
  if (from.ispositiontracked() != 0) {
    set_ispositiontracked(from.ispositiontracked());
  }
  if (from.isspeedtracked() != 0) {
    set_isspeedtracked(from.isspeedtracked());
  }
  if (from.leadspeed() != 0) {
    set_leadspeed(from.leadspeed());
  }
  if (from.ownspeed() != 0) {
    set_ownspeed(from.ownspeed());
  }
  if (from.curgear() != 0) {
    set_curgear(from.curgear());
  }
  if (from.steerlock() != 0) {
    set_steerlock(from.steerlock());
  }
  if (from.enginerpm() != 0) {
    set_enginerpm(from.enginerpm());
  }
  if (from.enginerpmmax() != 0) {
    set_enginerpmmax(from.enginerpmmax());
  }
  if (from.steer() != 0) {
    set_steer(from.steer());
  }
  if (from.brakefl() != 0) {
    set_brakefl(from.brakefl());
  }
  if (from.brakefr() != 0) {
    set_brakefr(from.brakefr());
  }
  if (from.brakerl() != 0) {
    set_brakerl(from.brakerl());
  }
  if (from.brakerr() != 0) {
    set_brakerr(from.brakerr());
  }
}

void SensorDataOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.SensorDataOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDataOut::CopyFrom(const SensorDataOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.SensorDataOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDataOut::IsInitialized() const {
  return true;
}

void SensorDataOut::Swap(SensorDataOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorDataOut::InternalSwap(SensorDataOut* other) {
  using std::swap;
  swap(leadpos_, other->leadpos_);
  swap(ownpos_, other->ownpos_);
  swap(cornerfrontright_, other->cornerfrontright_);
  swap(cornerfrontleft_, other->cornerfrontleft_);
  swap(cornerrearright_, other->cornerrearright_);
  swap(cornerrearleft_, other->cornerrearleft_);
  swap(ispositiontracked_, other->ispositiontracked_);
  swap(isspeedtracked_, other->isspeedtracked_);
  swap(leadspeed_, other->leadspeed_);
  swap(ownspeed_, other->ownspeed_);
  swap(curgear_, other->curgear_);
  swap(steerlock_, other->steerlock_);
  swap(enginerpm_, other->enginerpm_);
  swap(enginerpmmax_, other->enginerpmmax_);
  swap(steer_, other->steer_);
  swap(brakefl_, other->brakefl_);
  swap(brakefr_, other->brakefr_);
  swap(brakerl_, other->brakerl_);
  swap(brakerr_, other->brakerr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorDataOut::GetMetadata() const {
  protobuf_SensorDataOut_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorDataOut_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
